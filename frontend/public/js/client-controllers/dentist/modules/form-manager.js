class DentistFormManager {
  constructor(dataManager, uiManager) {
    this.dataManager = dataManager;
    this.uiManager = uiManager;
    this.currentDentistId = null;
  }

  // Obtener datos del formulario de agregar
  getAddFormData() {
    const form = document.getElementById("add_new_dentist");
    if (!form) return null;

    const formData = {
      name: document.getElementById("firstName")?.value?.trim() || "",
      lastName: document.getElementById("lastName")?.value?.trim() || "",
      registrationNumber:
        document.getElementById("registrationNumber")?.value?.trim() || "",
      specialty: document.getElementById("specialty")?.value?.trim() || "",
    };

    console.log("üìù DentistFormManager - getAddFormData:", formData);
    return formData;
  }

  // Obtener datos del formulario de edici√≥n
  getEditFormData() {
    const form = document.getElementById("update_dentist_form");
    if (!form) return null;

    // Obtener ID del campo o usar currentDentistId como fallback
    const dentistIdField = document.getElementById("dentist_id");
    const dentistId = dentistIdField?.value
      ? parseInt(dentistIdField.value)
      : this.currentDentistId;

    if (!dentistId) {
      console.error("‚ùå No se puede obtener ID del dentista para edici√≥n");
      this.uiManager.showMessage(
        "Error: ID del dentista es requerido para actualizaci√≥n",
        "danger"
      );
      return null;
    }

    const formData = {
      id: dentistId,
      name: document.getElementById("name")?.value?.trim() || "",
      lastName: document.getElementById("lastName")?.value?.trim() || "",
      registrationNumber:
        document.getElementById("registrationNumber")?.value?.trim() || "",
      specialty: document.getElementById("specialty")?.value?.trim() || "",
    };

    console.log("üìù DentistFormManager - getEditFormData:", formData);
    return formData;
  }

  // Validar datos del formulario
  validateFormData(data) {
    console.log("‚úÖ DentistFormManager - Validando datos:", data);

    const validation = this.dataManager.validateDentistData(data);

    if (!validation.isValid) {
      console.log("‚ùå Validaci√≥n fallida:", validation.errors);
      this.uiManager.showMessage(validation.errors.join(", "), "danger");
      return false;
    }

    // Validaciones adicionales espec√≠ficas del frontend

    // Validar que el nombre no contenga n√∫meros
    if (!/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/.test(data.name)) {
      this.uiManager.showMessage(
        "El nombre solo puede contener letras",
        "danger"
      );
      return false;
    }

    // Validar que el apellido no contenga n√∫meros
    if (!/^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]+$/.test(data.lastName)) {
      this.uiManager.showMessage(
        "El apellido solo puede contener letras",
        "danger"
      );
      return false;
    }

    // Validar formato de matr√≠cula (letras y n√∫meros)
    if (!/^[a-zA-Z0-9]+$/.test(data.registrationNumber)) {
      this.uiManager.showMessage(
        "La matr√≠cula solo puede contener letras y n√∫meros",
        "danger"
      );
      return false;
    }

    return true;
  }

  // Manejar env√≠o del formulario de agregar
  async handleAddSubmit(e) {
    e.preventDefault();
    console.log("‚ûï DentistFormManager - Procesando formulario de agregar");

    const formData = this.getAddFormData();
    if (!formData || !this.validateFormData(formData)) {
      return;
    }

    const submitButton =
      document.getElementById("btn-add-dentist") ||
      e.target.querySelector('button[type="submit"]');

    this.uiManager.setLoadingState(submitButton, "Agregando...");

    try {
      const newDentist = await this.dataManager.createDentist(formData);

      this.uiManager.showMessage(
        `Dr. ${newDentist.name} ${newDentist.lastName} agregado exitosamente`,
        "success"
      );

      // Limpiar formulario
      this.uiManager.clearForm("add_new_dentist");

      // Redirigir a la lista despu√©s de un breve delay
      setTimeout(() => {
        window.location.href = "/dentists";
      }, 2000);
    } catch (error) {
      console.error("‚ùå Error al agregar dentista:", error);
      this.uiManager.showMessage(
        `Error al agregar dentista: ${error.message}`,
        "danger"
      );
    } finally {
      this.uiManager.resetLoadingState(submitButton, "Agregar Dentista");
    }
  }

  // Manejar env√≠o del formulario de edici√≥n
  async handleEditSubmit(e) {
    e.preventDefault();
    console.log("üîÑ DentistFormManager - Procesando formulario de edici√≥n");
    console.log("üîç currentDentistId:", this.currentDentistId);

    const formData = this.getEditFormData();
    console.log("üîç formData obtenido:", formData);

    if (!formData) {
      console.error("‚ùå No se pudieron obtener los datos del formulario");
      return;
    }

    if (!formData.id) {
      console.error("‚ùå ID del dentista faltante en formData");
      this.uiManager.showMessage(
        "Error: ID del dentista es requerido para actualizaci√≥n",
        "danger"
      );
      return;
    }

    if (!this.validateFormData(formData)) {
      console.error("‚ùå Validaci√≥n de datos fall√≥");
      return;
    }

    const submitButton =
      document.getElementById("btn-update-dentist") ||
      e.target.querySelector('button[type="submit"]');

    this.uiManager.setLoadingState(submitButton, "Actualizando...");

    try {
      const updatedDentist = await this.dataManager.updateDentist(
        formData.id,
        formData
      );

      this.uiManager.showMessage(
        `Dr. ${updatedDentist.name} ${updatedDentist.lastName} actualizado exitosamente`,
        "success"
      );

      // Ocultar secci√≥n de edici√≥n
      this.uiManager.toggleUpdateSection(false);

      // Refrescar la tabla si estamos en la p√°gina de lista
      if (window.dentistController && window.dentistController.refreshData) {
        await window.dentistController.refreshData();
      } else {
        // Recargar p√°gina si no hay controlador disponible
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      }
    } catch (error) {
      console.error("‚ùå Error al actualizar dentista:", error);
      this.uiManager.showMessage(
        `Error al actualizar dentista: ${error.message}`,
        "danger"
      );
    } finally {
      this.uiManager.resetLoadingState(submitButton, "Actualizar Dentista");
    }
  }

  // Preparar formulario para edici√≥n
  async prepareEditForm(dentistId) {
    try {
      console.log(
        `üîß DentistFormManager - Preparando edici√≥n para dentista ${dentistId}`
      );

      this.currentDentistId = dentistId;
      console.log("üîç currentDentistId asignado:", this.currentDentistId);

      // Cargar datos del dentista
      const dentist = await this.dataManager.loadDentistById(dentistId);
      console.log("üîç Dentista cargado:", dentist);

      // Llenar formulario
      this.uiManager.fillForm(dentist, "edit");

      // Verificar que el campo dentist_id se llen√≥ correctamente
      const dentistIdField = document.getElementById("dentist_id");
      console.log(
        "üîç Campo dentist_id despu√©s de llenar:",
        dentistIdField?.value
      );

      // Mostrar secci√≥n de edici√≥n
      this.uiManager.toggleUpdateSection(true);

      console.log("‚úÖ Formulario de edici√≥n preparado");
    } catch (error) {
      console.error("‚ùå Error al preparar formulario de edici√≥n:", error);
      this.uiManager.showMessage(
        `Error al cargar datos del dentista: ${error.message}`,
        "danger"
      );
    }
  }

  // Cancelar edici√≥n
  cancelEdit() {
    console.log("‚ùå DentistFormManager - Cancelando edici√≥n");

    this.currentDentistId = null;
    this.uiManager.toggleUpdateSection(false);
    this.uiManager.clearForm("update_dentist_form");

    this.uiManager.showMessage("Edici√≥n cancelada", "info", 2000);
  }

  // Manejar eliminaci√≥n de dentista
  async handleDelete(dentistId) {
    try {
      console.log(
        `üóëÔ∏è DentistFormManager - Iniciando eliminaci√≥n de dentista ${dentistId}`
      );

      // Cargar datos del dentista para mostrar en confirmaci√≥n
      const dentist = await this.dataManager.loadDentistById(dentistId);

      // Mostrar confirmaci√≥n
      const confirmed = this.uiManager.showDeleteConfirmation(
        dentist,
        async () => {
          await this.executeDelete(dentistId, dentist);
        }
      );

      if (!confirmed) {
        console.log("‚ùå Eliminaci√≥n cancelada por el usuario");
      }
    } catch (error) {
      console.error("‚ùå Error al preparar eliminaci√≥n:", error);
      this.uiManager.showMessage(
        `Error al cargar datos del dentista: ${error.message}`,
        "danger"
      );
    }
  }

  // Ejecutar eliminaci√≥n
  async executeDelete(dentistId, dentist) {
    try {
      console.log(
        `üóëÔ∏è DentistFormManager - Ejecutando eliminaci√≥n de dentista ${dentistId}`
      );

      await this.dataManager.deleteDentist(dentistId);

      this.uiManager.showMessage(
        `Dr. ${dentist.name} ${dentist.lastName} eliminado exitosamente`,
        "success"
      );

      // Si estamos editando este dentista, cancelar la edici√≥n
      if (this.currentDentistId === dentistId) {
        this.cancelEdit();
      }

      // Refrescar la tabla si estamos en la p√°gina de lista
      if (window.dentistController && window.dentistController.refreshData) {
        setTimeout(async () => {
          await window.dentistController.refreshData();
        }, 1000);
      } else {
        // Recargar p√°gina si no hay controlador disponible
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      }
    } catch (error) {
      console.error("‚ùå Error al eliminar dentista:", error);
      this.uiManager.showMessage(
        `Error al eliminar dentista: ${error.message}`,
        "danger"
      );
    }
  }

  // Configurar eventos del formulario de agregar
  bindAddFormEvents() {
    const form = document.getElementById("add_new_dentist");
    if (form) {
      form.addEventListener("submit", (e) => this.handleAddSubmit(e));
      this.uiManager.setupFormValidation("add_new_dentist");
      console.log("‚úÖ Eventos del formulario de agregar configurados");
    }
  }

  // Configurar eventos del formulario de edici√≥n
  bindEditFormEvents() {
    const form = document.getElementById("update_dentist_form");
    if (form) {
      form.addEventListener("submit", (e) => this.handleEditSubmit(e));
      this.uiManager.setupFormValidation("update_dentist_form");
      console.log("‚úÖ Eventos del formulario de edici√≥n configurados");
    }

    // Configurar bot√≥n de cancelar
    const cancelButton = document.getElementById("btn-cancel-edit");
    if (cancelButton) {
      cancelButton.addEventListener("click", () => this.cancelEdit());
    }
  }

  // Configurar b√∫squeda
  bindSearchEvents() {
    const searchInput = document.getElementById("searchDentist");
    if (searchInput) {
      let searchTimeout;

      searchInput.addEventListener("input", (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          this.handleSearch(e.target.value);
        }, 300); // Debounce de 300ms
      });

      console.log("‚úÖ Eventos de b√∫squeda configurados");
    }
  }

  // Manejar b√∫squeda
  async handleSearch(searchTerm) {
    try {
      console.log(`üîç DentistFormManager - Buscando: "${searchTerm}"`);

      // Asegurar que tenemos los datos cargados
      if (this.dataManager.getCurrentDentists().length === 0) {
        await this.dataManager.loadAllDentists();
      }

      const results = this.dataManager.searchDentists(searchTerm);
      this.uiManager.displaySearchResults(results, searchTerm);
    } catch (error) {
      console.error("‚ùå Error en b√∫squeda:", error);
      this.uiManager.showMessage("Error al realizar la b√∫squeda", "danger");
    }
  }

  // Obtener ID del dentista actual en edici√≥n
  getCurrentDentistId() {
    return this.currentDentistId;
  }
}

export default DentistFormManager;
